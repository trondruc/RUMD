#!/usr/bin/python3
"""script to compute a cross-correlation function of data in the energy files.

A script that calculates cross-correlation function of two columns from
the energy output files.
"""

import argparse
import collections
import time
import analyze_energies as analyze

time_0 = time.process_time()


# Parse command-line arguments
parser = argparse.ArgumentParser()
parser.add_argument("column_name", nargs=2,
                    help="names of columns to analyze")
parser.add_argument("-n", "--normalize",
                    help="normalize the autocorrelation function(s)",
                    action="store_true")
parser.add_argument("-l", "--log_binning", type=float,
                    help="do logarithmic data binning of the output")
parser.add_argument("-w", "--write_fraction", type=float, default=0.01,
                    help="the fraction of the output that is written to file")
args = parser.parse_args()


# Create analyze_energies object, read energy files
nrgs = analyze.AnalyzeEnergies()
nrgs.read_energies(args.column_name)


# Calculate the length of the output
length_data = len(nrgs.energies[args.column_name[0]])
length = int(args.write_fraction * length_data)


# Calculate output
name = '-'.join(args.column_name)
output = collections.OrderedDict()
t, c = nrgs.correlation_function(args.column_name[0], args.column_name[1],
                                 length=length, normalize=args.normalize)
if args.log_binning is not None:
    bins = analyze.create_logarithmic_bins(t[1], t[-1],
                                           bins_per_decade=args.log_binning)
    binned_t, binned_c = analyze.data_binning(t, c, bins)
    output['time'] = binned_t
    output[name] = binned_c
else:
    output['time'] = t
    output[name] = c


# Save output to file
if args.log_binning is None:
    filename = "crosscorrelation-"+name+".dat.gz"
else:
    filename = "crosscorrelation-"+name+".dat"
analyze.write_columns_to_file(filename, output)
print("Done! rumd_crosscorrelation,", time.process_time()-time_0, "seconds")
