#!/usr/bin/python3
"""script to compute a cross-correlation function of data in the energy files.

A script that calculates cross-correlation function of two columns from
the energy output files.
"""

import argparse
import collections
import time
import analyze_energies as analyze

time_0 = time.process_time()


# Parse command-line arguments
parser = argparse.ArgumentParser()
parser.add_argument("column_name", nargs='+',
                    help="names of columns to analyze")
parser.add_argument("-l", "--log_binning", type=float, default=20,
                    help="do logarithmic data binning of the output")
args = parser.parse_args()
if len(args.column_name) not in (1, 2):
    print("Warning: specify one or two columns, ignoring excess columns.")


# Create analyze_energies object, read energy files
nrgs = analyze.AnalyzeEnergies()
nrgs.read_energies(args.column_name)


# Calculate response function
if len(args.column_name) == 1:
    omega, response = nrgs.response_function(args.column_name[0])
else:
    omega, response = nrgs.response_function(args.column_name[0],
                                             args.column_name[1])


# Save output to file, maybe perform logarithmic data binning
output = collections.OrderedDict()
name = '-'.join(args.column_name)
if args.log_binning == 0:
    filename = "response-"+name+".dat.gz"
    output['omega'] = omega 
    output['real'] = response.real
    output['imag'] = response.imag
else:
    bins = analyze.create_logarithmic_bins(omega[1], omega[-1],
                                           bins_per_decade=args.log_binning)
    binned_omega, binned_response = analyze.data_binning(omega, response, bins)
    output['omega'] = binned_omega
    output['real'] = binned_response.real
    output['imag'] = binned_response.imag
    filename = "response-"+name+".dat"


# Save output to file
analyze.write_columns_to_file(filename, output)
print("Done! rumd_response,", time.process_time()-time_0, "seconds")
