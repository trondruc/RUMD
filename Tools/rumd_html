#!/bin/bash
### Generate a webpage from RUMD simulation data

odir=html
ruvis=false

# Handle commandline input
while getopts "ho:v" opt; do
  case $opt in
	h)
      echo ""
	  echo "  Generate a webpage from RUMD simulation data."
      echo ""
	  echo "Usage: $0 [-o ./html]"
      echo ""
      echo "  -h,         Print this help message."
      echo "  -o DIR,     Output directory for webpage."
      echo "  -v          Include visualization with RUVIS"
      echo ""
      echo "Example: $0 -o $HOME/public_html/rumd"
      echo ""
      exit 0
    ;;
    o)
      odir=$OPTARG
    ;;
    v)
      ruvis=true
    ;;
	\?)
	  echo "error: Invalid option: -$OPTARG" >&2
      exit 1
	  ;;
    :)
	  echo "error: Option -$OPTARG requires an argument. Use -h for usage help." >&2
      exit 1
      ;;
  esac
done  

html=$odir/index.html

echo Write webpage to $odir

if [ -d $odir ]; then
  echo "warning: $odir already exist."
else 
  mkdir -p $odir
fi


# Begin HTML file
echo '<!DOCTYPE html>
<html>
<head>
<title>RUMD simulation</title>
<style>

td,p {
font-family: arial,sans-serif;
color: #000000;
}

body {
  background: white;
  color: #000000;
  font-family: arial,sans-serif;
  font-weight: normal;
  font-size: medium;
  min-width: 500px;
  max-width: 950px;
  margin-left: 3%;
  margin-right: 12%;
}

a:link {
color: #0050fa;
}

a:visited {
color: #1188ff;
}

h1 {
background-color: #10a0ff;
color: #ffffff;
font-size: xx-large;
padding: 2em;
margin: 8em;
}

h2 {
background-color: #141FB3; /*#10a0ff;*/
color: #ffffff;
font-size: 1.2em;
padding: 2px;
margin-top: 5px;
}

h3 {
background-color: #10a0ff;
color: #ffffff;
font-size: 1.1em;
padding: 2px;
margin-top: 5px;
}

h4,h5,h6 {
color: #606060;
font-size: large;
padding: 2px;
margin-top: 5px;
}

</style>
<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/default.min.css">
<script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
</head>
<div id="content">
<body>
' > $html
# TODO use our own build of highlight.js
#<meta charset="UTF-8">
#<link rel="stylesheet" type="text/css" href="http://rumd.org/rumd.css" />


# Some basic stats
echo "<p style=\"text-align:right\">" ` date ` "</p>"  >> $html
echo "<h2>RUMD simulation</h2>" >> $html
echo "<p><b>Path:</b> " `pwd` "</p>" >> $html
echo "<p><b>Last Complete Block (restart):</b> " ` cat ./TrajectoryFiles/LastComplete_restart.txt ` "</p>" >> $html
echo "<p><b>Disk usage:</b> " `du -sh` "</p>" >> $html
if [ $ruvis = true ]; then
  echo "<p><a href=ruvis.htm>View trajectory with RUVIS</a></p>" >> $html
fi

# Print content of readme file (if it exist)
if [ -e readme ]; then
  echo "<h3>readme</h3><pre>" >> $html
  cat readme >> $html
  echo "</pre>" >> $html
fi


# Write directory content
echo "<h3>Directory content</h3><pre>" >> $html
ls -lh >> $html
echo "</pre>" >> $html


# Print content of short data files (if they exist)
varList="energies_covar energies_mean energies_drift energies_var energies_mean_sq energies_var qmax qvalues rumd_timing_info"
for var in $varList;do
if [ -e $var.dat ]; then
  echo "<h3>$var.dat</h3><pre>" >> $html
  cat $var.dat  >> $html
  echo "</pre>" >> $html
fi
done


# LIN-LIN Plot data files (if they exist)
varList="rdf sq ke pe p T Etot W V rho"
for var in $varList;do
if [ -e $var.dat ]; then
 echo '
    set term png
    plot "'$var'.dat"
 ' | gnuplot > $odir/$var.png 
  echo '<h3>'$var'.dat</h3>' >> $html
  echo '<p><img src="'$var'.png" alt="'$var'"></p>' >> $html
fi
done


# LOG-LIN Plot data files (if they exist)
varList="Fs autocorrelations"
for var in $varList;do
if [ -e $var.dat ]; then
 echo '
    set term png
    set log x
    plot "'$var'.dat"
 ' | gnuplot > $odir/$var.png 
  echo '<h3>'$var'.dat</h3>' >> $html
  echo '<p><img src="'$var'.png" alt="'$var'"></p>' >> $html
fi
done


# LOG-LOG Plot data files (if they exist)
varList="msd"
for var in $varList;do
if [ -e $var.dat ]; then
 echo '
    set term png
    set log x
    set log y
    plot "'$var'.dat"
 ' | gnuplot > $odir/$var.png 
  echo '<h3>'$var'.dat</h3>' >> $html
  echo '<p><img src="'$var'.png" alt="'$var'"></p>' >> $html
fi
done


# Generate image of configurations using VMD
#tmpfile=$(mktemp --suffix .xyz) && {
#fileList=`ls *.xyz.gz`
#for file in $fileList;do
#  zcat $file > $tmpfile
#  xytga=$(mktemp --suffix .tga)
#  echo "display projection Orthographic;mol modstyle 0 0 VDW 0.3 12.0;animate goto 0;render TachyonInternal $xytga" | vmd -dispdev text $tmpfile
#  tgatoppm $xytga | ppmtojpeg > $odir/${file}xy.jpg
#  rm "$xytga"
#  yztga=$(mktemp --suffix .tga)
#  echo "display projection Orthographic;mol modstyle 0 0 VDW 0.3 12.0;rotate y by -90;animate goto 0;render TachyonInternal $yztga" | vmd -dispdev text $tmpfile
#  tgatoppm $yztga | ppmtojpeg > $odir/${file}yz.jpg
#  rm "$yztga"
#  echo "<h3>$file:</h3><pre>" >> $html
#  zcat $file | head -6 >> $html
#  echo "..." >> $html
#  echo '</pre><p><img src="'$file'xy.jpg" alt="'$file' xy"><img src="'$file'yz.jpg" alt="'$file' yz"></p>' >> $html
#done
#rm "$tmpfile"
#}

# Generate image of configurations using rumd_image
fileList=`ls *.xyz.gz`
for file in $fileList;do
  name="${file%%.*}"
  echo "<h3>$file:</h3><pre>" >> $html
  zcat $file | head -6 >> $html
  echo "..." >> $html
  echo '</pre><p><img src="'$name'.png" alt="Image of '$file'" width=800 height=600></p>' >> $html
  rumd_image -d -i $file -o $odir/$name
  povray -GA -D +W800 +H600 +HIpovray.ini +I$odir/$name.pov
  rm $odir/$name.pov
done

# Print python script
fileList=`ls *.py`
for file in $fileList;do
  echo '<h3>'$file'</h3><pre><code class="python">' >> $html
  cat $file >> $html
  echo "</code></pre>" >> $html
done

# Shell scripts
fileList=`ls *.sh`
for file in $fileList;do
  echo '<h3>'$file'</h3><pre><code class="bash">' >> $html
  cat $file >> $html
  echo "</code></pre>" >> $html
done

# Markdown files
fileList=`ls *.md`
for file in $fileList;do
  echo '<h3>'$file'</h3><pre><code class="markdown.md">' >> $html
  cat $file >> $html
  echo "</code></pre>" >> $html
done

# Print log and error files
fileList=`ls *.log *.err`
for file in $fileList;do
  echo '<h3>'$file'</h3><pre>' >> $html
  cat $file >> $html
  echo "</pre>" >> $html
done

## Print queue status
echo "<h3>Queue status</h3><pre>" >> $html
qstat -fa  >> $html
echo "</pre>" >> $html


# End HTML file
echo '</div>
</body>
</html>' >> $html




### Make the RUVIS webpage

# Generate trajectory in json format
if [ $ruvis = true ]; then
echo Convert trajectory to json
zcat TrajectoryFiles/restart????.xyz.gz | awk '
{
	if(c++==0){
		N=$1
		getline
		for(n=1;n<NF+1;n++){
			split($n,var,"=")
			if(var[1]=="numTypes"){
				numTypes=var[2]
			}else if(var[1]=="sim_box"){
				split(var[2],num,",")
				X=num[2]
				Y=num[3]
				Z=num[4]
			}
		}
		printf "var bbox=[%f,%f,%f,%f,%f,%f];\n",-X/2,-Y/2,-Z/2,X/2,Y/2,Z/2
		printf "var N=%d;\n",N
		printf "var types=%d;\n",numTypes
		printf "var diameter=[1.0,0.8,1.0,1.0];\n"
		printf "var color=[new BABYLON.Color3(0.7, 0.7, 0.9),new BABYLON.Color3(0.0, 0.0, 0.9),new BABYLON.Color3(0.9, 0.0, 0.0),new BABYLON.Color3(0.0, 0.9, 0.0)];\n"
		printf "var xyz=["
	}
	for(i=0;i<N;i++){
		getline
		if(d++==0){
			printf "%d,%3.3f,%3.3f,%3.3f",$1,$2,$3,$4
		}else{
			printf ",%d,%3.3f,%3.3f,%3.3f",$1,$2,$3,$4
		}
	}
	#printf "\n"
	getline
	#exit 0
}END{
	printf "];\n"
}
' > $odir/xyz.js

# Write ruvis html page
echo "
<!DOCTYPE html>
<html>
<head>
  <title>RUVIS - visualization of molecular dynamics simulations</title>
  <style>
    html, body {
      overflow: hidden;
      width: 100%;
      height: 100%;
      margin: 0;
      padding: 0;
    }
    #renderCanvas {
      width: 100%;
      height: 100%;
      touch-action: none;
    }
  </style>
  <script src=\"https://cdn.babylonjs.com/babylon.js\"></script>
</head>
<body>
  <div id=loadingText><p>Loading trajectory ...</p></div>
  <script src=xyz.js></script>
  <script>document.getElementById('loadingText').style.display=\"none\"</script>
  <canvas id=renderCanvas></canvas>

<script> 
var animate=true;
var requestAnimateUpdate=false;
var step=0;
var animateStride=1;
var frame=0;
var newCameraRadius=30;
var requestCameraRadius=false;
var frames = (xyz.length)/(4*N);
console.log(\"Start RUVIS: N = \" + N + \" frames = \" + frames);
window.addEventListener('DOMContentLoaded', function() {
	var canvas = document.getElementById('renderCanvas');
	var engine = new BABYLON.Engine(canvas, true);
	var createScene = function () {
		var scene = new BABYLON.Scene(engine);
		//Create a lights
		
		var light = new BABYLON.PointLight(\"Omni\", new BABYLON.Vector3(-60, 60, 80), scene);
		light.intensity = 0.5;
		var light1 = new BABYLON.HemisphericLight(\"Hemi\", new BABYLON.Vector3(0, 1, 0), scene);
		light1.intensity = 0.7;
		//var light2 = new BABYLON.DirectionalLight(\"dir01\", new BABYLON.Vector3(-1, -2, -1), scene);
		//light2.position = new BABYLON.Vector3(20, 40, 20);
		//light2.intensity = 0.3;
		var light3 = new BABYLON.DirectionalLight(\"dir02\", new BABYLON.Vector3(1, 2, 1), scene);
		light3.position = new BABYLON.Vector3(-40, -80, -40);
		light3.intensity = 0.2;
		
		
		//Create an Arc Rotate Camera - aimed negative z this time
		var camera = new BABYLON.ArcRotateCamera(\"Camera\", Math.PI / 2, 1.0, newCameraRadius, BABYLON.Vector3.Zero(), scene);
		camera.attachControl(canvas, true, true);
		//camera.attachControl(canvas, false);
		//camera.collisionRadius = new BABYLON.Vector3(2.0, 2.0, 2.0);
		/* EXample on orthographic camera
		camera.mode = BABYLON.Camera.ORTHOGRAPHIC_CAMERA;
		camera.orthoTop = 5;
		camera.orthoBottom = -5;
			camera.orthoLeft = -5;
			camera.orthoRight = 5; 
		*/
		// Create materials
		var materialType = [];
		for(var type=0;type<types;type++){
			materialType[type] = new BABYLON.StandardMaterial(\"texture_type\" + type, scene);
			materialType[type].diffuseColor = color[type];
			
			//materialType[type].alpha = 1.0;
		}
		
		// Create spheres
		var sphere = [];
		for(var i=0;i<N;i++){
			var type= xyz[4*i+0];
			var x	= xyz[4*i+1];
			var y	= xyz[4*i+2];
			var z	= xyz[4*i+3];
			sphere[i] = BABYLON.Mesh.CreateSphere(\"Atom\" + i, 6, diameter[type], scene);
			sphere[i].position = new BABYLON.Vector3(x, y, z);
			sphere[i].material = materialType[type];
		}
		// Create boundary box
		// Creation of a lines mesh
		var lines = BABYLON.Mesh.CreateLines(\"lines\", [
			new BABYLON.Vector3(bbox[0], bbox[1], bbox[2]),
			new BABYLON.Vector3(bbox[0+3], bbox[1], bbox[2]),
			new BABYLON.Vector3(bbox[0+3], bbox[1+3], bbox[2]),
			new BABYLON.Vector3(bbox[0], bbox[1+3], bbox[2]),
			new BABYLON.Vector3(bbox[0], bbox[1], bbox[2]),
			new BABYLON.Vector3(bbox[0], bbox[1], bbox[2+3]),
			new BABYLON.Vector3(bbox[0+3], bbox[1], bbox[2+3]),
			new BABYLON.Vector3(bbox[0+3], bbox[1+3], bbox[2+3]),
			new BABYLON.Vector3(bbox[0], bbox[1+3], bbox[2+3]),
			new BABYLON.Vector3(bbox[0], bbox[1], bbox[2+3]),
			new BABYLON.Vector3(bbox[0], bbox[1+3], bbox[2+3]),
			new BABYLON.Vector3(bbox[0], bbox[1+3], bbox[2]),
			new BABYLON.Vector3(bbox[0+3], bbox[1+3], bbox[2]),
			new BABYLON.Vector3(bbox[0+3], bbox[1+3], bbox[2+3])
		], scene);
		
		// Animate particle positions
		scene.registerBeforeRender(function () {
			if(requestCameraRadius){
				camera.radius = newCameraRadius;	// TODO make a moveTowards function
				requestCameraRadius=false;
			}else{
				newCameraRadius = camera.radius;
			}
			step++;
			if((animate && step%animateStride==0) || requestAnimateUpdate){
				requestAnimateUpdate=false;
				if(animate){
					frame++;
					frame%=frames;
				}
				//console.log(frame);
				for(var i=0;i<N;i++) {
					var first = 4*(i+frame*N);
					var type= xyz[first+0];
					var x	= xyz[first+1];
					var y	= xyz[first+2];
					var z	= xyz[first+3];
					sphere[i].position = new BABYLON.Vector3(xyz[first+1], xyz[first+2], xyz[first+3]);
					sphere[i].material = materialType[type];
				}
			}
		});
	
		return scene;
	};
	var scene = createScene();
	engine.runRenderLoop(function() {
		scene.render();
	});
	window.addEventListener('resize', function() {
		engine.resize();
	});
});
// Set keyboard shortcuts
document.body.onkeyup = function(e){
	var key = String.fromCharCode(e.keyCode)
	console.log('Pressed ' + key +  ' keycode ' + e.keyCode )
	if(e.keyCode == 73){  // i for Information on 
		alert('        ..:: Keyboard shortcuts ::..\\n' + 
			'i: Display this information.\\n' +
			'Arrow keys: Rotate.\\n' +
			's and a: Zoom in and out.\\n' +
			'Spacebar or h: Halt/run animation.\\n' +
			'h, j, k, and l: Set animation speed.\\n' +
			'z or x: Goto first or last frame.\\n' +
			'v, b, n, and m: Step through animation.\\n'
		);
	} else if(e.keyCode == 83 ) {	// Zoom in
		newCameraRadius /= 1.1;
		requestCameraRadius=true;
		console.log('newCameraRadius=' + newCameraRadius);
	} else if(e.keyCode == 65 ) {	// Zoom out
		newCameraRadius *= 1.1;
		requestCameraRadius=true;
		console.log('newCameraRadius=' + newCameraRadius);
	} else if(e.keyCode == 32 || e.keyCode == 72 ) {	// Start/stop animation
		if(animate){
			animate=false;
		}else{
			animate=true;
		}
		console.log('animate=' + animateStride);
	} else if (e.keyCode == 74) {				// Slowdown
		animate=true;
		animateStride*=2;
		console.log('animate=' + animateStride);
		console.log('animateStride=' + animateStride);
	} else if (e.keyCode == 75) {				// Speedup
		animate=true;
		if(animateStride>1){
	                animateStride/=2;
		}
		console.log('animate=' + animateStride);
		console.log('animateStride=' + animateStride);
	} else if (e.keyCode == 76) {				// Set to max speed
		animate=true;
		animateStride=1;
	} else if (e.keyCode == 78) {				// Next frame
		animate=false;
		frame=(++frame)%frames;
		console.log('frame: ' + frame);
		requestAnimateUpdate=true;
	} else if (e.keyCode == 66) {				// Back a frame
		animate=false;
		if(--frame<0){frame=frames-1}
                console.log('frame: ' + frame);
                requestAnimateUpdate=true;
	} else if (e.keyCode == 77) {				// 20 forward 
		animate=false;
		frame+=20;
		if(frame>frames-1){frame=frames-1};
		console.log('frame: ' + frame);
		requestAnimateUpdate=true;
	} else if (e.keyCode == 86) {				// 20 back
		animate=false;
		frame-=20;
		if(--frame<0){frame=0}
                console.log('frame: ' + frame);
                requestAnimateUpdate=true;
	} else if (e.keyCode == 90) {				// Goto first frame
		animate=false;
		frame=0;
                console.log('frame: ' + frame);
                requestAnimateUpdate=true;
	} else if (e.keyCode == 88) {				// Goto last frame
		animate=false;
		frame=frames-1;
                console.log('frame: ' + frame);
                requestAnimateUpdate=true;
	}
}
</script>

</body>
</html>" > $odir/ruvis.htm
fi # End ruvis loop 

# Say godbye to the nice user
echo Wrote a webpage to $odir
